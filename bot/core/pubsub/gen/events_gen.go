// +build ignore

package main

import (
	"log"
	"os"
	"text/template"

	"github.com/iancoleman/strcase"
)

const templateSource = `// Generated by events_gen.go

package pubsub

import (
	"github.com/mitchellh/mapstructure"
)

const (
    EventAll = "all" {{range .}}
	Event{{.Name}} = "{{.ProperName}}"{{end}}
)

var AllEvents = []string{ {{range .}}
	Event{{.Name}},{{end}}
}

{{range .}}{{if .Receive}}
func (event *EventData) {{.Name}}() *Receive{{.Name}}{
    var output Receive{{.Name}}
    decoder, _ := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
        Result: &output,
        TagName: "json",
    })

    _ = decoder.Decode(event.Data)

	return &output
}
{{end}}{{end}}
`

type Event struct {
	Name       string
	ProperName string
	Receive    bool
}

var ReceiveEvents = []string{
	"get_user",
	"get_member",
	"get_guild",
	"get_permission",
	"send_message",
	"get_connected",
	"set_connected",
}

var OtherEvents = []string{
	"response",
	"flush_guilds",
	"voice_update",
}

var (
	parsedTemplate = template.Must(template.New("").Parse(templateSource))
	outputFile     = "../all_events.go"
)

func main() {
	var events []Event

	for _, name := range ReceiveEvents {
		event := Event{
			Name:       strcase.ToCamel(name),
			ProperName: name,
			Receive:    true,
		}

		events = append(events, event)
	}

	for _, name := range OtherEvents {
		event := Event{
			Name:       strcase.ToCamel(name),
			ProperName: name,
		}

		events = append(events, event)
	}

	file, err := os.Create(outputFile)
	if err != nil {
		log.Fatalf("Failed to create file: %s", err)
	}

	err = parsedTemplate.Execute(file, events)
	if err != nil {
		log.Fatalf("Failed to execute template: %s", err)
	}

	err = file.Close()
	if err != nil {
		log.Fatalf("Failed to save and close file: %s", err)
	}

	log.Println("The file is generated successfully")
}
